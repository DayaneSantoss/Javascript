'use strict'//ativa modo estrito - evita bugs que normalmente ficariam invisiveis e evita o uso de palavras reservadas

// function

function nameCandidate(name1, name2){
  console.log(name1,name2)
  const candidates = `the first candidade is ${name1} and second candidate is ${name2}`
  return candidates
}

let listCandidates = nameCandidate('lucia', 'joao')
console.log(listCandidates)


///////////////////////////////////////
// Function Declarations vs. Expressions

// Function declaration - ela Ã© elevada (hoisted), o que significa que ela pode ser chamada antes da prÃ³pria definiÃ§Ã£o no cÃ³digo.
const age1 = calcAge1(1991);

function calcAge1(birthYeah) {
    return 2037 - birthYeah;
  }

// Function expression - funÃ§ao mais flexivel , pois permite que as funÃ§oes sejam tratadas como qualquer outro valor emm javascript . Elas sÃ³ podem ser chamadas apÃ³s a declaraÃ§Ã£o no cÃ³digo
  
  // const age2 = calcAge2(1991);   dÃ¡ ruim 

  const calcAge2 = function (birthYeah) {
    return 2037 - birthYeah;
  }
  const age2 = calcAge2(1991);  
  
  console.log(age1, age2);
  
//tentative

const calculate = function (num){
  return 2037 - num
}
const cal = calculate(20)
console.log(cal)

//   ///////////////////////////////////////
//   // Arrow functions - nÃ£o obtem palavra-chave
  
  const calcAge3 = birthYeah => 2037 - birthYeah;
  const age3 = calcAge3(1991);
  console.log(age3);
  
  const yearsUntilRetirement = (birthYeah, firstName) => {
    const age = 2037 - birthYeah;
    const retirement = 65 - age;
    // return retirement;
    return `${firstName} retires in ${retirement} years`;
  }
  

console.log(yearsUntilRetirement(1991, 'Jonas')); 
console.log(yearsUntilRetirement(1980, 'Bob'));
  
  
  ///////////////////////////////////////
  // Functions Calling Other Functions
  function cutFruitPieces(fruit) {
    return fruit * 4;
  }
  
  function fruitProcessor(apples, oranges) {
    const applePieces = cutFruitPieces(apples);
    const orangePieces = cutFruitPieces(oranges);
  
    const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
    return juice;
  }
  console.log(fruitProcessor(2, 3));
   
  
  ///////////////////////////////////////
  // Reviewing Functions
  const calcAge = function (birthYeah) {
    return 2037 - birthYeah;
  }
  
  const yearsUntilRetirement2 = function (birthYeah, firstName) {
    const age = calcAge(birthYeah);
    const retirement = 65 - age;
  
    if (retirement > 0) {
      console.log(`${firstName} retires in ${retirement} years`);
      return retirement;
    } else {
      console.log(`${firstName} has already retired ðŸŽ‰`);
      return -1;
    }
  }
  
    console.log(yearsUntilRetirement(1991, 'Jonas'));
    console.log(yearsUntilRetirement(1950, 'Mike'));

  
//   ///////////////////////////////////////
//   // Coding Challenge #1
  
//   /*
// De volta Ã s duas equipes de ginÃ¡stica, os Golfinhos e os Coalas! HÃ¡ uma nova disciplina de ginÃ¡stica, que funciona de forma diferente.
// Cada equipe compete 3 vezes e entÃ£o a mÃ©dia das 3 pontuaÃ§Ãµes Ã© calculada (ou seja, uma pontuaÃ§Ã£o mÃ©dia por equipe).
// Uma equipe SÃ“ vence se tiver pelo menos o DOBRAMENTO da pontuaÃ§Ã£o mÃ©dia da outra equipe. Caso contrÃ¡rio, nenhuma equipe vence!
  
// 1. Crie uma funÃ§Ã£o de seta 'calcAverage' para calcular a mÃ©dia de 3 pontuaÃ§Ãµes
// 2. Use a funÃ§Ã£o para calcular a mÃ©dia de ambas as equipes
// 3. Crie uma funÃ§Ã£o 'checkWinner' que tome como parÃ¢metros a pontuaÃ§Ã£o mÃ©dia de cada equipe ('avgDolphins' e 'avgKoalas'), e entÃ£o registre o vencedor no console, junto com os pontos de vitÃ³ria, conforme regra acima . Exemplo: "VitÃ³ria dos coalas (30 vs. 13)".
// 4. Use a funÃ§Ã£o 'checkWinner' para determinar o vencedor para DADOS 1 e DADOS 2.
// 5. Ignore os draws desta vez.

// DADOS DE TESTE 1: Golfinhos pontuam 44, 23 e 71. Coalas pontuam 65, 54 e 49
// DADOS DE TESTE 2: Golfinhos pontuam 85, 54 e 41. Coalas pontuam 23, 34 e 27

// DICA: Para calcular a mÃ©dia de 3 valores, some todos e divida por 3
// DICA: Para verificar se o nÃºmero A Ã© pelo menos o dobro do nÃºmero B, verifique A >= 2 * B. Aplique isso Ã s pontuaÃ§Ãµes mÃ©dias da equipe ðŸ˜‰
//   GOOD LUCK ðŸ˜€
//   */

const calcAverage = (point1, point2, point3) => (point1 + point2 + point3) / 3

const scoreDolphins = calcAverage(85, 54,41);
const scoreKoalas = calcAverage(23, 34,27);
console.log(scoreDolphins, scoreKoalas);


const checkWinner = (avgDolphins, avgKoalas) => {
  if (avgDolphins >= 2 * avgKoalas) {
    console.log(`Dolphins win (${avgDolphins} vs. ${avgKoalas})`)
  }
  else if (avgKoalas >= 2 * avgDolphins) {
    console.log(`Koalas win (${avgKoalas} vs. ${avgDolphins})`)
  }else{
    console.log(`No one win`)
  }
}
checkWinner(scoreDolphins, scoreKoalas);

